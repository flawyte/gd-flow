#!/bin/bash


# ---------- HEADER (gives you some informations)
# This work is licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to Creative Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.
#
# Name : gd-flow (stands for Git Deployment Flow)
# Description : gdflow is a little bash script that allows you to automate deployment using Git and the rsync command only.
# Project page : https://github.com/inspirat/gd-flow
# Version : 1.1
# Parameters :
#       * $1 : Path to the local git repository that triggered the hook
#       * $2 : Destination directory - where to deploy the files - without trailing slash
#       * $3 [Optional] : File containing patterns to exclude from the synchronization - See the "INCLUDE/EXCLUDE PATTERN RULES" part at "http://rsync.samba.org/ftp/rsync/rsync.html"
#
# WARNING : Don't forget to chmod +x the script so it can be triggered by Git.

read oldvalue newvalue refname # See "https://www.kernel.org/pub/software/scm/git/docs/githooks.html#post-receive" for more informations


# ---------- VARIABLES (what you have to modify)

dest_dir=$2
exclude_file=/dev/null # will not exclude any file or directory
git_dir=$1
temp_dir="$dest_dir-temp"

if [ $# == 3 ] ;
then
        exclude_file=$3
fi


# ---------- OPERATIONS (what you can ignore)

if [ ! -d "$dest_dir" ] ;
then
        echo "[gd-flow] The destination directory doesn't exists : $dest_dir"
        exit 1
elif [[ $exclude_file != /dev/null && ! -f $exclude_file ]] ;
then
        echo "[gd-flow] The exclude file doesn't exists : $exclude_file"
        exit 1
elif [ ! -d "$git_dir" ] ;
then
        echo "[gd-flow] The Git directory doesn't exists : $git_dir"
        exit 1
fi

# Creates the temporary directory
mkdir $temp_dir

# Creates the files in the temporary directory by doing a hard reset
git --git-dir=$git_dir --work-tree=$temp_dir reset --hard $refname

# Updates the content of the destination directory by using synchronization
rsync -a --delete --exclude-from=$exclude_file --progress -r -v "$temp_dir/" "$dest_dir/"

# Removes the temporary directory and its content
rm -rf $temp_dir
